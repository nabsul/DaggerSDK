// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace DaggerSDK.CodeGen
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    case JTokenType.String:
                        return "\"" + ((string)jValue.Value).Replace("\"", "\\\"") + "\"";
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is Guid)
                return "\"" + value + "\"";
    
            if (value is String @string)
                return "\"" + @string.Replace("\"", "\\\"") + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string CacheId = "CacheID";
        public const string ContainerId = "ContainerID";
        public const string DateTime = "DateTime";
        public const string DirectoryId = "DirectoryID";
        public const string FileId = "FileID";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Platform = "Platform";
        public const string SecretId = "SecretID";
        public const string SocketId = "SocketID";
        public const string String = "String";

        public const string CacheSharingMode = "CacheSharingMode";
        public const string NetworkProtocol = "NetworkProtocol";

        public const string CacheVolume = "CacheVolume";
        public const string Container = "Container";
        public const string Directory = "Directory";
        public const string EnvVariable = "EnvVariable";
        public const string File = "File";
        public const string GitRef = "GitRef";
        public const string GitRepository = "GitRepository";
        public const string Host = "Host";
        public const string HostVariable = "HostVariable";
        public const string Label = "Label";
        public const string Port = "Port";
        public const string Project = "Project";
        public const string Query = "Query";
        public const string Secret = "Secret";
        public const string Socket = "Socket";

        public const string BuildArg = "BuildArg";
        public const string PipelineLabel = "PipelineLabel";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(string), "String" },
                { typeof(int), "Int" },
                { typeof(bool), "Boolean" },
                { typeof(BuildArg), "BuildArg" },
                { typeof(PipelineLabel), "PipelineLabel" }
            };
}
    #endregion

    #region enums
    public enum CacheSharingMode
    {
        [EnumMember(Value = "SHARED")] Shared,
        [EnumMember(Value = "PRIVATE")] Private,
        [EnumMember(Value = "LOCKED")] Locked
    }

    public enum NetworkProtocol
    {
        [EnumMember(Value = "TCP")] Tcp,
        [EnumMember(Value = "UDP")] Udp
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public partial class GitRepositoryQueryBuilder : GraphQlQueryBuilder<GitRepositoryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "branch", IsComplex = true, QueryBuilderType = typeof(GitRefQueryBuilder) },
                new GraphQlFieldMetadata { Name = "branches", IsComplex = true },
                new GraphQlFieldMetadata { Name = "commit", IsComplex = true, QueryBuilderType = typeof(GitRefQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tag", IsComplex = true, QueryBuilderType = typeof(GitRefQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tags", IsComplex = true }
            };

        protected override string TypeName { get { return "GitRepository"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GitRepositoryQueryBuilder WithBranch(GitRefQueryBuilder gitRefQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("branch", alias, gitRefQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GitRepositoryQueryBuilder ExceptBranch()
        {
            return ExceptField("branch");
        }

        public GitRepositoryQueryBuilder WithBranches(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("branches", alias, new GraphQlDirective[] { include, skip });
        }

        public GitRepositoryQueryBuilder ExceptBranches()
        {
            return ExceptField("branches");
        }

        public GitRepositoryQueryBuilder WithCommit(GitRefQueryBuilder gitRefQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("commit", alias, gitRefQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GitRepositoryQueryBuilder ExceptCommit()
        {
            return ExceptField("commit");
        }

        public GitRepositoryQueryBuilder WithTag(GitRefQueryBuilder gitRefQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("tag", alias, gitRefQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GitRepositoryQueryBuilder ExceptTag()
        {
            return ExceptField("tag");
        }

        public GitRepositoryQueryBuilder WithTags(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tags", alias, new GraphQlDirective[] { include, skip });
        }

        public GitRepositoryQueryBuilder ExceptTags()
        {
            return ExceptField("tags");
        }
    }

    public partial class DirectoryQueryBuilder : GraphQlQueryBuilder<DirectoryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "diff", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "directory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "dockerBuild", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "entries", IsComplex = true },
                new GraphQlFieldMetadata { Name = "export" },
                new GraphQlFieldMetadata { Name = "file", IsComplex = true, QueryBuilderType = typeof(FileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "loadProject", IsComplex = true, QueryBuilderType = typeof(ProjectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pipeline", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withDirectory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withFile", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withNewDirectory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withNewFile", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withTimestamps", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutDirectory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutFile", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) }
            };

        protected override string TypeName { get { return "Directory"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DirectoryQueryBuilder WithDiff(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<object> other, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "other", ArgumentValue = other} );
            return WithObjectField("diff", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptDiff()
        {
            return ExceptField("diff");
        }

        public DirectoryQueryBuilder WithDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("directory", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptDirectory()
        {
            return ExceptField("directory");
        }

        public DirectoryQueryBuilder WithDockerBuild(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> dockerfile = null, QueryBuilderParameter<object> platform = null, QueryBuilderParameter<IEnumerable<BuildArg>> buildArgs = null, QueryBuilderParameter<string> target = null, QueryBuilderParameter<IEnumerable<object>> secrets = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (dockerfile != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "dockerfile", ArgumentValue = dockerfile} );

            if (platform != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "platform", ArgumentValue = platform} );

            if (buildArgs != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "buildArgs", ArgumentValue = buildArgs} );

            if (target != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "target", ArgumentValue = target} );

            if (secrets != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "secrets", ArgumentValue = secrets} );

            return WithObjectField("dockerBuild", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptDockerBuild()
        {
            return ExceptField("dockerBuild");
        }

        public DirectoryQueryBuilder WithEntries(QueryBuilderParameter<string> path = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (path != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );

            return WithScalarField("entries", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptEntries()
        {
            return ExceptField("entries");
        }

        public DirectoryQueryBuilder WithExport(QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithScalarField("export", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptExport()
        {
            return ExceptField("export");
        }

        public DirectoryQueryBuilder WithFile(FileQueryBuilder fileQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("file", alias, fileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptFile()
        {
            return ExceptField("file");
        }

        public DirectoryQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public DirectoryQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public DirectoryQueryBuilder WithLoadProject(ProjectQueryBuilder projectQueryBuilder, QueryBuilderParameter<string> configPath, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "configPath", ArgumentValue = configPath} );
            return WithObjectField("loadProject", alias, projectQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptLoadProject()
        {
            return ExceptField("loadProject");
        }

        public DirectoryQueryBuilder WithPipeline(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> description = null, QueryBuilderParameter<IEnumerable<PipelineLabel>> labels = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            if (description != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );

            if (labels != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "labels", ArgumentValue = labels} );

            return WithObjectField("pipeline", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptPipeline()
        {
            return ExceptField("pipeline");
        }

        public DirectoryQueryBuilder WithWithDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> directory, QueryBuilderParameter<IEnumerable<string>> exclude = null, QueryBuilderParameter<IEnumerable<string>> include = null, string alias = null, IncludeDirective includeDirective = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "directory", ArgumentValue = directory} );
            if (exclude != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "exclude", ArgumentValue = exclude} );

            if (include != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "include", ArgumentValue = include} );

            return WithObjectField("withDirectory", alias, directoryQueryBuilder, new GraphQlDirective[] { includeDirective, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithDirectory()
        {
            return ExceptField("withDirectory");
        }

        public DirectoryQueryBuilder WithWithFile(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<int?> permissions = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (permissions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "permissions", ArgumentValue = permissions} );

            return WithObjectField("withFile", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithFile()
        {
            return ExceptField("withFile");
        }

        public DirectoryQueryBuilder WithWithNewDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<int?> permissions = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            if (permissions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "permissions", ArgumentValue = permissions} );

            return WithObjectField("withNewDirectory", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithNewDirectory()
        {
            return ExceptField("withNewDirectory");
        }

        public DirectoryQueryBuilder WithWithNewFile(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<string> contents, QueryBuilderParameter<int?> permissions = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "contents", ArgumentValue = contents} );
            if (permissions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "permissions", ArgumentValue = permissions} );

            return WithObjectField("withNewFile", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithNewFile()
        {
            return ExceptField("withNewFile");
        }

        public DirectoryQueryBuilder WithWithTimestamps(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<int> timestamp, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "timestamp", ArgumentValue = timestamp} );
            return WithObjectField("withTimestamps", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithTimestamps()
        {
            return ExceptField("withTimestamps");
        }

        public DirectoryQueryBuilder WithWithoutDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withoutDirectory", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithoutDirectory()
        {
            return ExceptField("withoutDirectory");
        }

        public DirectoryQueryBuilder WithWithoutFile(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withoutFile", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public DirectoryQueryBuilder ExceptWithoutFile()
        {
            return ExceptField("withoutFile");
        }
    }

    public partial class HostVariableQueryBuilder : GraphQlQueryBuilder<HostVariableQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "HostVariable"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HostVariableQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public HostVariableQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class HostQueryBuilder : GraphQlQueryBuilder<HostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "directory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "envVariable", IsComplex = true, QueryBuilderType = typeof(HostVariableQueryBuilder) },
                new GraphQlFieldMetadata { Name = "unixSocket", IsComplex = true, QueryBuilderType = typeof(SocketQueryBuilder) }
            };

        protected override string TypeName { get { return "Host"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HostQueryBuilder WithDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<IEnumerable<string>> exclude = null, QueryBuilderParameter<IEnumerable<string>> include = null, string alias = null, IncludeDirective includeDirective = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            if (exclude != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "exclude", ArgumentValue = exclude} );

            if (include != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "include", ArgumentValue = include} );

            return WithObjectField("directory", alias, directoryQueryBuilder, new GraphQlDirective[] { includeDirective, skip }, args);
        }

        public HostQueryBuilder ExceptDirectory()
        {
            return ExceptField("directory");
        }

        public HostQueryBuilder WithEnvVariable(HostVariableQueryBuilder hostVariableQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("envVariable", alias, hostVariableQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HostQueryBuilder ExceptEnvVariable()
        {
            return ExceptField("envVariable");
        }

        public HostQueryBuilder WithUnixSocket(SocketQueryBuilder socketQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("unixSocket", alias, socketQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HostQueryBuilder ExceptUnixSocket()
        {
            return ExceptField("unixSocket");
        }
    }

    public partial class ProjectQueryBuilder : GraphQlQueryBuilder<ProjectQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "extensions", IsComplex = true, QueryBuilderType = typeof(ProjectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "generatedCode", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "install" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "schema" },
                new GraphQlFieldMetadata { Name = "sdk" }
            };

        protected override string TypeName { get { return "Project"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProjectQueryBuilder WithExtensions(ProjectQueryBuilder projectQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("extensions", alias, projectQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptExtensions()
        {
            return ExceptField("extensions");
        }

        public ProjectQueryBuilder WithGeneratedCode(DirectoryQueryBuilder directoryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("generatedCode", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptGeneratedCode()
        {
            return ExceptField("generatedCode");
        }

        public ProjectQueryBuilder WithInstall(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("install", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptInstall()
        {
            return ExceptField("install");
        }

        public ProjectQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ProjectQueryBuilder WithSchema(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("schema", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptSchema()
        {
            return ExceptField("schema");
        }

        public ProjectQueryBuilder WithSdk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("sdk", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectQueryBuilder ExceptSdk()
        {
            return ExceptField("sdk");
        }
    }

    public partial class GitRefQueryBuilder : GraphQlQueryBuilder<GitRefQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "digest" },
                new GraphQlFieldMetadata { Name = "tree", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) }
            };

        protected override string TypeName { get { return "GitRef"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GitRefQueryBuilder WithDigest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("digest", alias, new GraphQlDirective[] { include, skip });
        }

        public GitRefQueryBuilder ExceptDigest()
        {
            return ExceptField("digest");
        }

        public GitRefQueryBuilder WithTree(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> sshKnownHosts = null, QueryBuilderParameter<object> sshAuthSocket = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (sshKnownHosts != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sshKnownHosts", ArgumentValue = sshKnownHosts} );

            if (sshAuthSocket != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sshAuthSocket", ArgumentValue = sshAuthSocket} );

            return WithObjectField("tree", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public GitRefQueryBuilder ExceptTree()
        {
            return ExceptField("tree");
        }
    }

    public partial class FileQueryBuilder : GraphQlQueryBuilder<FileQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "contents" },
                new GraphQlFieldMetadata { Name = "export" },
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "size" },
                new GraphQlFieldMetadata { Name = "withTimestamps", IsComplex = true, QueryBuilderType = typeof(FileQueryBuilder) }
            };

        protected override string TypeName { get { return "File"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FileQueryBuilder WithContents(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contents", alias, new GraphQlDirective[] { include, skip });
        }

        public FileQueryBuilder ExceptContents()
        {
            return ExceptField("contents");
        }

        public FileQueryBuilder WithExport(QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithScalarField("export", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public FileQueryBuilder ExceptExport()
        {
            return ExceptField("export");
        }

        public FileQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FileQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FileQueryBuilder WithSize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("size", alias, new GraphQlDirective[] { include, skip });
        }

        public FileQueryBuilder ExceptSize()
        {
            return ExceptField("size");
        }

        public FileQueryBuilder WithWithTimestamps(FileQueryBuilder fileQueryBuilder, QueryBuilderParameter<int> timestamp, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "timestamp", ArgumentValue = timestamp} );
            return WithObjectField("withTimestamps", alias, fileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FileQueryBuilder ExceptWithTimestamps()
        {
            return ExceptField("withTimestamps");
        }
    }

    public partial class EnvVariableQueryBuilder : GraphQlQueryBuilder<EnvVariableQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "EnvVariable"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EnvVariableQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public EnvVariableQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EnvVariableQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public EnvVariableQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cacheVolume", IsComplex = true, QueryBuilderType = typeof(CacheVolumeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "container", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultPlatform", IsComplex = true },
                new GraphQlFieldMetadata { Name = "directory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "file", IsComplex = true, QueryBuilderType = typeof(FileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "git", IsComplex = true, QueryBuilderType = typeof(GitRepositoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "host", IsComplex = true, QueryBuilderType = typeof(HostQueryBuilder) },
                new GraphQlFieldMetadata { Name = "http", IsComplex = true, QueryBuilderType = typeof(FileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pipeline", IsComplex = true, QueryBuilderType = typeof(QueryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "project", IsComplex = true, QueryBuilderType = typeof(ProjectQueryBuilder) },
                new GraphQlFieldMetadata { Name = "secret", IsComplex = true, QueryBuilderType = typeof(SecretQueryBuilder) },
                new GraphQlFieldMetadata { Name = "setSecret", IsComplex = true, QueryBuilderType = typeof(SecretQueryBuilder) },
                new GraphQlFieldMetadata { Name = "socket", IsComplex = true, QueryBuilderType = typeof(SocketQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithCacheVolume(CacheVolumeQueryBuilder cacheVolumeQueryBuilder, QueryBuilderParameter<string> key, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "key", ArgumentValue = key} );
            return WithObjectField("cacheVolume", alias, cacheVolumeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCacheVolume()
        {
            return ExceptField("cacheVolume");
        }

        public QueryQueryBuilder WithContainer(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<object> id = null, QueryBuilderParameter<object> platform = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            if (platform != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "platform", ArgumentValue = platform} );

            return WithObjectField("container", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContainer()
        {
            return ExceptField("container");
        }

        public QueryQueryBuilder WithDefaultPlatform(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("defaultPlatform", alias, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptDefaultPlatform()
        {
            return ExceptField("defaultPlatform");
        }

        public QueryQueryBuilder WithDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<object> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("directory", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptDirectory()
        {
            return ExceptField("directory");
        }

        public QueryQueryBuilder WithFile(FileQueryBuilder fileQueryBuilder, QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("file", alias, fileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFile()
        {
            return ExceptField("file");
        }

        public QueryQueryBuilder WithGit(GitRepositoryQueryBuilder gitRepositoryQueryBuilder, QueryBuilderParameter<string> url, QueryBuilderParameter<bool?> keepGitDir = null, QueryBuilderParameter<object> experimentalServiceHost = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "url", ArgumentValue = url} );
            if (keepGitDir != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "keepGitDir", ArgumentValue = keepGitDir} );

            if (experimentalServiceHost != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "experimentalServiceHost", ArgumentValue = experimentalServiceHost} );

            return WithObjectField("git", alias, gitRepositoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGit()
        {
            return ExceptField("git");
        }

        public QueryQueryBuilder WithHost(HostQueryBuilder hostQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("host", alias, hostQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptHost()
        {
            return ExceptField("host");
        }

        public QueryQueryBuilder WithHttp(FileQueryBuilder fileQueryBuilder, QueryBuilderParameter<string> url, QueryBuilderParameter<object> experimentalServiceHost = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "url", ArgumentValue = url} );
            if (experimentalServiceHost != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "experimentalServiceHost", ArgumentValue = experimentalServiceHost} );

            return WithObjectField("http", alias, fileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptHttp()
        {
            return ExceptField("http");
        }

        public QueryQueryBuilder WithPipeline(QueryQueryBuilder queryQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> description = null, QueryBuilderParameter<IEnumerable<PipelineLabel>> labels = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            if (description != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );

            if (labels != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "labels", ArgumentValue = labels} );

            return WithObjectField("pipeline", alias, queryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPipeline()
        {
            return ExceptField("pipeline");
        }

        public QueryQueryBuilder WithProject(ProjectQueryBuilder projectQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("project", alias, projectQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProject()
        {
            return ExceptField("project");
        }

        public QueryQueryBuilder WithSecret(SecretQueryBuilder secretQueryBuilder, QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("secret", alias, secretQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSecret()
        {
            return ExceptField("secret");
        }

        public QueryQueryBuilder WithSetSecret(SecretQueryBuilder secretQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> plaintext, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "plaintext", ArgumentValue = plaintext} );
            return WithObjectField("setSecret", alias, secretQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSetSecret()
        {
            return ExceptField("setSecret");
        }

        public QueryQueryBuilder WithSocket(SocketQueryBuilder socketQueryBuilder, QueryBuilderParameter<object> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (id != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

            return WithObjectField("socket", alias, socketQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSocket()
        {
            return ExceptField("socket");
        }
    }

    public partial class SecretQueryBuilder : GraphQlQueryBuilder<SecretQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "plaintext" }
            };

        protected override string TypeName { get { return "Secret"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SecretQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SecretQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SecretQueryBuilder WithPlaintext(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("plaintext", alias, new GraphQlDirective[] { include, skip });
        }

        public SecretQueryBuilder ExceptPlaintext()
        {
            return ExceptField("plaintext");
        }
    }

    public partial class ContainerQueryBuilder : GraphQlQueryBuilder<ContainerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "build", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultArgs", IsComplex = true },
                new GraphQlFieldMetadata { Name = "directory", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "endpoint" },
                new GraphQlFieldMetadata { Name = "entrypoint", IsComplex = true },
                new GraphQlFieldMetadata { Name = "envVariable" },
                new GraphQlFieldMetadata { Name = "envVariables", IsComplex = true, QueryBuilderType = typeof(EnvVariableQueryBuilder) },
                new GraphQlFieldMetadata { Name = "exitCode" },
                new GraphQlFieldMetadata { Name = "export" },
                new GraphQlFieldMetadata { Name = "exposedPorts", IsComplex = true, QueryBuilderType = typeof(PortQueryBuilder) },
                new GraphQlFieldMetadata { Name = "file", IsComplex = true, QueryBuilderType = typeof(FileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "from", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "hostname" },
                new GraphQlFieldMetadata { Name = "id", IsComplex = true },
                new GraphQlFieldMetadata { Name = "imageRef" },
                new GraphQlFieldMetadata { Name = "import", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "label" },
                new GraphQlFieldMetadata { Name = "labels", IsComplex = true, QueryBuilderType = typeof(LabelQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mounts", IsComplex = true },
                new GraphQlFieldMetadata { Name = "pipeline", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "platform", IsComplex = true },
                new GraphQlFieldMetadata { Name = "publish" },
                new GraphQlFieldMetadata { Name = "rootfs", IsComplex = true, QueryBuilderType = typeof(DirectoryQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stderr" },
                new GraphQlFieldMetadata { Name = "stdout" },
                new GraphQlFieldMetadata { Name = "user" },
                new GraphQlFieldMetadata { Name = "withDefaultArgs", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withDirectory", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withEntrypoint", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withEnvVariable", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withExec", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withExposedPort", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withFile", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withLabel", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withMountedCache", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withMountedDirectory", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withMountedFile", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withMountedSecret", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withMountedTemp", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withNewFile", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withRegistryAuth", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withRootfs", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withSecretVariable", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withServiceBinding", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withUnixSocket", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withUser", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withWorkdir", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutEnvVariable", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutExposedPort", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutLabel", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutMount", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutRegistryAuth", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "withoutUnixSocket", IsComplex = true, QueryBuilderType = typeof(ContainerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "workdir" }
            };

        protected override string TypeName { get { return "Container"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContainerQueryBuilder WithBuild(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<object> context, QueryBuilderParameter<string> dockerfile = null, QueryBuilderParameter<IEnumerable<BuildArg>> buildArgs = null, QueryBuilderParameter<string> target = null, QueryBuilderParameter<IEnumerable<object>> secrets = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "context", ArgumentValue = context} );
            if (dockerfile != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "dockerfile", ArgumentValue = dockerfile} );

            if (buildArgs != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "buildArgs", ArgumentValue = buildArgs} );

            if (target != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "target", ArgumentValue = target} );

            if (secrets != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "secrets", ArgumentValue = secrets} );

            return WithObjectField("build", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptBuild()
        {
            return ExceptField("build");
        }

        public ContainerQueryBuilder WithDefaultArgs(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("defaultArgs", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptDefaultArgs()
        {
            return ExceptField("defaultArgs");
        }

        public ContainerQueryBuilder WithDirectory(DirectoryQueryBuilder directoryQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("directory", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptDirectory()
        {
            return ExceptField("directory");
        }

        public ContainerQueryBuilder WithEndpoint(QueryBuilderParameter<int?> port = null, QueryBuilderParameter<string> scheme = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (port != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "port", ArgumentValue = port} );

            if (scheme != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "scheme", ArgumentValue = scheme} );

            return WithScalarField("endpoint", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptEndpoint()
        {
            return ExceptField("endpoint");
        }

        public ContainerQueryBuilder WithEntrypoint(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("entrypoint", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptEntrypoint()
        {
            return ExceptField("entrypoint");
        }

        public ContainerQueryBuilder WithEnvVariable(QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithScalarField("envVariable", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptEnvVariable()
        {
            return ExceptField("envVariable");
        }

        public ContainerQueryBuilder WithEnvVariables(EnvVariableQueryBuilder envVariableQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("envVariables", alias, envVariableQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptEnvVariables()
        {
            return ExceptField("envVariables");
        }

        public ContainerQueryBuilder WithExitCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("exitCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptExitCode()
        {
            return ExceptField("exitCode");
        }

        public ContainerQueryBuilder WithExport(QueryBuilderParameter<string> path, QueryBuilderParameter<IEnumerable<object>> platformVariants = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            if (platformVariants != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "platformVariants", ArgumentValue = platformVariants} );

            return WithScalarField("export", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptExport()
        {
            return ExceptField("export");
        }

        public ContainerQueryBuilder WithExposedPorts(PortQueryBuilder portQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("exposedPorts", alias, portQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptExposedPorts()
        {
            return ExceptField("exposedPorts");
        }

        public ContainerQueryBuilder WithFile(FileQueryBuilder fileQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("file", alias, fileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptFile()
        {
            return ExceptField("file");
        }

        public ContainerQueryBuilder WithFrom(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> address, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            return WithObjectField("from", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptFrom()
        {
            return ExceptField("from");
        }

        public ContainerQueryBuilder WithHostname(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hostname", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptHostname()
        {
            return ExceptField("hostname");
        }

        public ContainerQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ContainerQueryBuilder WithImageRef(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("imageRef", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptImageRef()
        {
            return ExceptField("imageRef");
        }

        public ContainerQueryBuilder WithImport(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<object> source, QueryBuilderParameter<string> tag = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (tag != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tag", ArgumentValue = tag} );

            return WithObjectField("import", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptImport()
        {
            return ExceptField("import");
        }

        public ContainerQueryBuilder WithLabel(QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithScalarField("label", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptLabel()
        {
            return ExceptField("label");
        }

        public ContainerQueryBuilder WithLabels(LabelQueryBuilder labelQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("labels", alias, labelQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptLabels()
        {
            return ExceptField("labels");
        }

        public ContainerQueryBuilder WithMounts(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mounts", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptMounts()
        {
            return ExceptField("mounts");
        }

        public ContainerQueryBuilder WithPipeline(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> description = null, QueryBuilderParameter<IEnumerable<PipelineLabel>> labels = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            if (description != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );

            if (labels != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "labels", ArgumentValue = labels} );

            return WithObjectField("pipeline", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptPipeline()
        {
            return ExceptField("pipeline");
        }

        public ContainerQueryBuilder WithPlatform(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("platform", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptPlatform()
        {
            return ExceptField("platform");
        }

        public ContainerQueryBuilder WithPublish(QueryBuilderParameter<string> address, QueryBuilderParameter<IEnumerable<object>> platformVariants = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            if (platformVariants != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "platformVariants", ArgumentValue = platformVariants} );

            return WithScalarField("publish", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptPublish()
        {
            return ExceptField("publish");
        }

        public ContainerQueryBuilder WithRootfs(DirectoryQueryBuilder directoryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("rootfs", alias, directoryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptRootfs()
        {
            return ExceptField("rootfs");
        }

        public ContainerQueryBuilder WithStderr(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stderr", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptStderr()
        {
            return ExceptField("stderr");
        }

        public ContainerQueryBuilder WithStdout(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("stdout", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptStdout()
        {
            return ExceptField("stdout");
        }

        public ContainerQueryBuilder WithUser(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("user", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ContainerQueryBuilder WithWithDefaultArgs(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<IEnumerable<string>> args = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var inputArgs = new List<QueryBuilderArgumentInfo>();
            if (args != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "args", ArgumentValue = args} );

            return WithObjectField("withDefaultArgs", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, inputArgs);
        }

        public ContainerQueryBuilder ExceptWithDefaultArgs()
        {
            return ExceptField("withDefaultArgs");
        }

        public ContainerQueryBuilder WithWithDirectory(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> directory, QueryBuilderParameter<IEnumerable<string>> exclude = null, QueryBuilderParameter<IEnumerable<string>> include = null, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective includeDirective = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "directory", ArgumentValue = directory} );
            if (exclude != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "exclude", ArgumentValue = exclude} );

            if (include != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "include", ArgumentValue = include} );

            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withDirectory", alias, containerQueryBuilder, new GraphQlDirective[] { includeDirective, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithDirectory()
        {
            return ExceptField("withDirectory");
        }

        public ContainerQueryBuilder WithWithEntrypoint(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<IEnumerable<string>> args, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var inputArgs = new List<QueryBuilderArgumentInfo>();
            inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "args", ArgumentValue = args} );
            return WithObjectField("withEntrypoint", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, inputArgs);
        }

        public ContainerQueryBuilder ExceptWithEntrypoint()
        {
            return ExceptField("withEntrypoint");
        }

        public ContainerQueryBuilder WithWithEnvVariable(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> value, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "value", ArgumentValue = value} );
            return WithObjectField("withEnvVariable", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithEnvVariable()
        {
            return ExceptField("withEnvVariable");
        }

        public ContainerQueryBuilder WithWithExec(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<IEnumerable<string>> args, QueryBuilderParameter<bool?> skipEntrypoint = null, QueryBuilderParameter<string> stdin = null, QueryBuilderParameter<string> redirectStdout = null, QueryBuilderParameter<string> redirectStderr = null, QueryBuilderParameter<bool?> experimentalPrivilegedNesting = null, QueryBuilderParameter<bool?> insecureRootCapabilities = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var inputArgs = new List<QueryBuilderArgumentInfo>();
            inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "args", ArgumentValue = args} );
            if (skipEntrypoint != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "skipEntrypoint", ArgumentValue = skipEntrypoint} );

            if (stdin != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "stdin", ArgumentValue = stdin} );

            if (redirectStdout != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "redirectStdout", ArgumentValue = redirectStdout} );

            if (redirectStderr != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "redirectStderr", ArgumentValue = redirectStderr} );

            if (experimentalPrivilegedNesting != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "experimentalPrivilegedNesting", ArgumentValue = experimentalPrivilegedNesting} );

            if (insecureRootCapabilities != null)
                inputArgs.Add(new QueryBuilderArgumentInfo { ArgumentName = "insecureRootCapabilities", ArgumentValue = insecureRootCapabilities} );

            return WithObjectField("withExec", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, inputArgs);
        }

        public ContainerQueryBuilder ExceptWithExec()
        {
            return ExceptField("withExec");
        }

        public ContainerQueryBuilder WithWithExposedPort(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<int> port, QueryBuilderParameter<NetworkProtocol?> protocol = null, QueryBuilderParameter<string> description = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "port", ArgumentValue = port} );
            if (protocol != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "protocol", ArgumentValue = protocol} );

            if (description != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "description", ArgumentValue = description} );

            return WithObjectField("withExposedPort", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithExposedPort()
        {
            return ExceptField("withExposedPort");
        }

        public ContainerQueryBuilder WithWithFile(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<int?> permissions = null, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (permissions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "permissions", ArgumentValue = permissions} );

            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withFile", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithFile()
        {
            return ExceptField("withFile");
        }

        public ContainerQueryBuilder WithWithLabel(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<string> value, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "value", ArgumentValue = value} );
            return WithObjectField("withLabel", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithLabel()
        {
            return ExceptField("withLabel");
        }

        public ContainerQueryBuilder WithWithMountedCache(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> cache, QueryBuilderParameter<object> source = null, QueryBuilderParameter<CacheSharingMode?> sharing = null, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "cache", ArgumentValue = cache} );
            if (source != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );

            if (sharing != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sharing", ArgumentValue = sharing} );

            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withMountedCache", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithMountedCache()
        {
            return ExceptField("withMountedCache");
        }

        public ContainerQueryBuilder WithWithMountedDirectory(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withMountedDirectory", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithMountedDirectory()
        {
            return ExceptField("withMountedDirectory");
        }

        public ContainerQueryBuilder WithWithMountedFile(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withMountedFile", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithMountedFile()
        {
            return ExceptField("withMountedFile");
        }

        public ContainerQueryBuilder WithWithMountedSecret(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withMountedSecret", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithMountedSecret()
        {
            return ExceptField("withMountedSecret");
        }

        public ContainerQueryBuilder WithWithMountedTemp(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withMountedTemp", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithMountedTemp()
        {
            return ExceptField("withMountedTemp");
        }

        public ContainerQueryBuilder WithWithNewFile(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<string> contents = null, QueryBuilderParameter<int?> permissions = null, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            if (contents != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "contents", ArgumentValue = contents} );

            if (permissions != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "permissions", ArgumentValue = permissions} );

            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withNewFile", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithNewFile()
        {
            return ExceptField("withNewFile");
        }

        public ContainerQueryBuilder WithWithRegistryAuth(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> address, QueryBuilderParameter<string> username, QueryBuilderParameter<object> secret, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "username", ArgumentValue = username} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "secret", ArgumentValue = secret} );
            return WithObjectField("withRegistryAuth", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithRegistryAuth()
        {
            return ExceptField("withRegistryAuth");
        }

        public ContainerQueryBuilder WithWithRootfs(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<object> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("withRootfs", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithRootfs()
        {
            return ExceptField("withRootfs");
        }

        public ContainerQueryBuilder WithWithSecretVariable(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, QueryBuilderParameter<object> secret, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "secret", ArgumentValue = secret} );
            return WithObjectField("withSecretVariable", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithSecretVariable()
        {
            return ExceptField("withSecretVariable");
        }

        public ContainerQueryBuilder WithWithServiceBinding(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> alias, QueryBuilderParameter<object> service, string alias2 = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "alias", ArgumentValue = alias} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "service", ArgumentValue = service} );
            return WithObjectField("withServiceBinding", alias2, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithServiceBinding()
        {
            return ExceptField("withServiceBinding");
        }

        public ContainerQueryBuilder WithWithUnixSocket(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, QueryBuilderParameter<object> source, QueryBuilderParameter<string> owner = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "source", ArgumentValue = source} );
            if (owner != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "owner", ArgumentValue = owner} );

            return WithObjectField("withUnixSocket", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithUnixSocket()
        {
            return ExceptField("withUnixSocket");
        }

        public ContainerQueryBuilder WithWithUser(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("withUser", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithUser()
        {
            return ExceptField("withUser");
        }

        public ContainerQueryBuilder WithWithWorkdir(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withWorkdir", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithWorkdir()
        {
            return ExceptField("withWorkdir");
        }

        public ContainerQueryBuilder WithWithoutEnvVariable(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("withoutEnvVariable", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutEnvVariable()
        {
            return ExceptField("withoutEnvVariable");
        }

        public ContainerQueryBuilder WithWithoutExposedPort(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<int> port, QueryBuilderParameter<NetworkProtocol?> protocol = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "port", ArgumentValue = port} );
            if (protocol != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "protocol", ArgumentValue = protocol} );

            return WithObjectField("withoutExposedPort", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutExposedPort()
        {
            return ExceptField("withoutExposedPort");
        }

        public ContainerQueryBuilder WithWithoutLabel(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> name, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );
            return WithObjectField("withoutLabel", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutLabel()
        {
            return ExceptField("withoutLabel");
        }

        public ContainerQueryBuilder WithWithoutMount(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withoutMount", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutMount()
        {
            return ExceptField("withoutMount");
        }

        public ContainerQueryBuilder WithWithoutRegistryAuth(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> address, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "address", ArgumentValue = address} );
            return WithObjectField("withoutRegistryAuth", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutRegistryAuth()
        {
            return ExceptField("withoutRegistryAuth");
        }

        public ContainerQueryBuilder WithWithoutUnixSocket(ContainerQueryBuilder containerQueryBuilder, QueryBuilderParameter<string> path, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "path", ArgumentValue = path} );
            return WithObjectField("withoutUnixSocket", alias, containerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContainerQueryBuilder ExceptWithoutUnixSocket()
        {
            return ExceptField("withoutUnixSocket");
        }

        public ContainerQueryBuilder WithWorkdir(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("workdir", alias, new GraphQlDirective[] { include, skip });
        }

        public ContainerQueryBuilder ExceptWorkdir()
        {
            return ExceptField("workdir");
        }
    }

    public partial class LabelQueryBuilder : GraphQlQueryBuilder<LabelQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "value" }
            };

        protected override string TypeName { get { return "Label"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LabelQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public LabelQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public LabelQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("value", alias, new GraphQlDirective[] { include, skip });
        }

        public LabelQueryBuilder ExceptValue()
        {
            return ExceptField("value");
        }
    }

    public partial class SocketQueryBuilder : GraphQlQueryBuilder<SocketQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id", IsComplex = true }
            };

        protected override string TypeName { get { return "Socket"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SocketQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SocketQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public partial class CacheVolumeQueryBuilder : GraphQlQueryBuilder<CacheVolumeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id", IsComplex = true }
            };

        protected override string TypeName { get { return "CacheVolume"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CacheVolumeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public CacheVolumeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }
    }

    public partial class PortQueryBuilder : GraphQlQueryBuilder<PortQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "port" },
                new GraphQlFieldMetadata { Name = "protocol" }
            };

        protected override string TypeName { get { return "Port"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PortQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public PortQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public PortQueryBuilder WithPort(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("port", alias, new GraphQlDirective[] { include, skip });
        }

        public PortQueryBuilder ExceptPort()
        {
            return ExceptField("port");
        }

        public PortQueryBuilder WithProtocol(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("protocol", alias, new GraphQlDirective[] { include, skip });
        }

        public PortQueryBuilder ExceptProtocol()
        {
            return ExceptField("protocol");
        }
    }
    #endregion

    #region input classes
    public partial class PipelineLabel : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_name.Name != null) yield return _name;
        }
    }

    public partial class BuildArg : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_name.Name != null) yield return _name;
        }
    }
    #endregion

    #region data classes
    public partial class GitRepository
    {
        public GitRef Branch { get; set; }
        public ICollection<string> Branches { get; set; }
        public GitRef Commit { get; set; }
        public GitRef Tag { get; set; }
        public ICollection<string> Tags { get; set; }
    }

    public partial class DirectoryData
    {
        public DirectoryData Diff { get; set; }
        public DirectoryData Directory { get; set; }
        public Container DockerBuild { get; set; }
        public ICollection<string> Entries { get; set; }
        public bool? Export { get; set; }
        public File File { get; set; }
        public object Id { get; set; }
        public Project LoadProject { get; set; }
        public DirectoryData Pipeline { get; set; }
        public DirectoryData WithDirectory { get; set; }
        public DirectoryData WithFile { get; set; }
        public DirectoryData WithNewDirectory { get; set; }
        public DirectoryData WithNewFile { get; set; }
        public DirectoryData WithTimestamps { get; set; }
        public DirectoryData WithoutDirectory { get; set; }
        public DirectoryData WithoutFile { get; set; }
    }

    public partial class HostVariable
    {
        public string Value { get; set; }
    }

    public partial class Host
    {
        public DirectoryData Directory { get; set; }
        public HostVariable EnvVariable { get; set; }
        public Socket UnixSocket { get; set; }
    }

    public partial class Project
    {
        public ICollection<Project> Extensions { get; set; }
        public DirectoryData GeneratedCode { get; set; }
        public bool? Install { get; set; }
        public string Name { get; set; }
        public string Schema { get; set; }
        public string Sdk { get; set; }
    }

    public partial class GitRef
    {
        public string Digest { get; set; }
        public DirectoryData Tree { get; set; }
    }

    public partial class File
    {
        public string Contents { get; set; }
        public bool? Export { get; set; }
        public object Id { get; set; }
        public int? Size { get; set; }
        public File WithTimestamps { get; set; }
    }

    public partial class EnvVariable
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public partial class Query
    {
        public CacheVolume CacheVolume { get; set; }
        public Container Container { get; set; }
        public object DefaultPlatform { get; set; }
        public DirectoryData Directory { get; set; }
        public File File { get; set; }
        public GitRepository Git { get; set; }
        public Host Host { get; set; }
        public File Http { get; set; }
        public Query Pipeline { get; set; }
        public Project Project { get; set; }
        public Secret Secret { get; set; }
        public Secret SetSecret { get; set; }
        public Socket Socket { get; set; }
    }

    public partial class Secret
    {
        public object Id { get; set; }
        public string Plaintext { get; set; }
    }

    public partial class Container
    {
        public Container Build { get; set; }
        public ICollection<string> DefaultArgs { get; set; }
        public DirectoryData Directory { get; set; }
        public string Endpoint { get; set; }
        public ICollection<string> Entrypoint { get; set; }
        public string EnvVariable { get; set; }
        public ICollection<EnvVariable> EnvVariables { get; set; }
        public int? ExitCode { get; set; }
        public bool? Export { get; set; }
        public ICollection<PortData> ExposedPorts { get; set; }
        public File File { get; set; }
        public Container From { get; set; }
        public string Hostname { get; set; }
        public object Id { get; set; }
        public string ImageRef { get; set; }
        public Container Import { get; set; }
        public string Label { get; set; }
        public ICollection<Label> Labels { get; set; }
        public ICollection<string> Mounts { get; set; }
        public Container Pipeline { get; set; }
        public object Platform { get; set; }
        public string Publish { get; set; }
        public DirectoryData Rootfs { get; set; }
        public string Stderr { get; set; }
        public string Stdout { get; set; }
        public string User { get; set; }
        public Container WithDefaultArgs { get; set; }
        public Container WithDirectory { get; set; }
        public Container WithEntrypoint { get; set; }
        public Container WithEnvVariable { get; set; }
        public Container WithExec { get; set; }
        public Container WithExposedPort { get; set; }
        public Container WithFile { get; set; }
        public Container WithLabel { get; set; }
        public Container WithMountedCache { get; set; }
        public Container WithMountedDirectory { get; set; }
        public Container WithMountedFile { get; set; }
        public Container WithMountedSecret { get; set; }
        public Container WithMountedTemp { get; set; }
        public Container WithNewFile { get; set; }
        public Container WithRegistryAuth { get; set; }
        public Container WithRootfs { get; set; }
        public Container WithSecretVariable { get; set; }
        public Container WithServiceBinding { get; set; }
        public Container WithUnixSocket { get; set; }
        public Container WithUser { get; set; }
        public Container WithWorkdir { get; set; }
        public Container WithoutEnvVariable { get; set; }
        public Container WithoutExposedPort { get; set; }
        public Container WithoutLabel { get; set; }
        public Container WithoutMount { get; set; }
        public Container WithoutRegistryAuth { get; set; }
        public Container WithoutUnixSocket { get; set; }
        public string Workdir { get; set; }
    }

    public partial class Label
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }

    public partial class Socket
    {
        public object Id { get; set; }
    }

    public partial class CacheVolume
    {
        public object Id { get; set; }
    }

    public partial class PortData
    {
        public string Description { get; set; }
        public int? Port { get; set; }
        public NetworkProtocol? Protocol { get; set; }
    }
    #endregion
}
